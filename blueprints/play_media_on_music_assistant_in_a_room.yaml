blueprint:
  name: Play Music on Music Assistant in a Room
  description:
    "Many Thanks to **JLo** for his original work. The blog post can be found [here](https://blog.jlpouffier.fr/chatgpt-powered-music-search-engine-on-a-local-voice-assistant/)\n
     Without his work, I would not have been able to create this blueprint.\n
     The template within this blueprint uses the `friendly_name` of the\n
     media_player entities associated with the `mass` integration.\n
     \n
     Play any music you want on any Music Assistant speaker\n
     Requirements:\n
    \ - Media Player coming from the Music Assistant integration\n  - OpenAI Conversation
    **configured with the prompt found [here](https://github.com/jozefKruszynski/home-assistant-things/blob/main/blueprints/modified_prompt.txt)**\n"
  domain: automation
  author: Music Assistant
  homeassistant:
    min_version: 2023.8.0
  input:
    assist_command:
      name: Assist Command
      description:
        "The Assist command you will use to start the music\nYou can change
        the overall sentence to match your style and language. \n**WARNING** you **MUST**
        include `{query}` in order to pass that variable to OpenAI and you **MUST** include `{friendly_name}`.\n"
      default: Play {query} on the {friendly_name}
      selector:
        text: {}
    open_ai_config_entry:
      name: OpenAI Configuration
      description: The OpenAI configuration **configured with the prompt found [here](https://github.com/jozefKruszynski/home-assistant-things/blob/main/blueprints/modified_prompt.txt)**
      selector:
        config_entry:
          integration: openai_conversation
    additional_conditions:
      name: Additional conditions
      description:
        "Extra conditions you may want to add to this automation \n(Example:
        Home occupied, Speaker on, etc)\n"
      default: []
      selector:
        condition: {}
  source_url: https://github.com/jozefKruszynski/home-assistant-things/blob/main/blueprints/play_media_on_music_assistant_in_a_room.yaml
trigger:
  - platform: conversation
    command: !input assist_command
condition: !input additional_conditions
variables:
  area: "{{trigger.slots.area}}"
action:
  - service: conversation.process
    data:
      agent_id: !input open_ai_config_entry
      text: "{{trigger.slots.query}}"
    response_variable: response_from_ai
  - service: mass.play_media
    data: "{{response_from_ai.response.speech.plain.speech|from_json}}"
    target:
      entity_id: >
        {% set ns = namespace(final_entity = "") %}
        {% for entity in integration_entities('mass') 
        if state_attr(entity, 'friendly_name') | lower | contains(friendly_name | lower) %}
        {% set ns.final_entity = entity %}
        {% endfor %}
        {{ns.final_entity}}
mode: single
